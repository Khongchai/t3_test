import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { GetStaticPaths, GetStaticPropsContext, NextPage } from "next";
import Head from "next/head";
import superjson from "superjson";
import LoadingIndicator from "~/components/loading";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";

const ProfilePage: NextPage = () => {
  const { data: user, isLoading } = api.profile.getUserByUserName.useQuery(
    {
      username: "khongchai",
    },
    {
      onError: (e) => {
        alert(e);
      },
    }
  );

  if (isLoading) return <LoadingIndicator full variant={"m"} />;

  if (!user) return <div>404</div>;

  return (
    <>
      <Head>
        <title>Post</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className="flex h-screen justify-center">
        <div>Profile View</div>
      </main>
    </>
  );
};

export default ProfilePage;

export async function getStaticProps(
  context: GetStaticPropsContext<{ slug: string }>
) {
  const helpers = createProxySSGHelpers({
    router: appRouter,
    ctx: {
      prisma,
      currentUserId: null,
    },
    transformer: superjson,
  });

  const username = context.params!.slug.replace("@", "");

  await helpers.profile.getUserByUserName.prefetch({
    username,
  });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      username,
    },
  };
}

export const getStaticPaths: GetStaticPaths = function () {
  return {
    paths: ["/khongchai"],
    fallback: "blocking",
  };
};
