import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import {
  GetStaticPaths,
  GetStaticPropsContext,
  NextPage,
  InferGetStaticPropsType,
} from "next";
import Head from "next/head";
import superjson from "superjson";
import LoadingIndicator from "~/components/loading";
import { PageLayout } from "~/components/pageLayout";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";
import Image from "next/image";

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

const ProfileFeed = (props: { userId: string }) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({
    userId: props.userId,
  });

  if (isLoading) return <LoadingIndicator full={false} variant={"m"} />;

  if (!data) return <div>No data for this user</div>;

  return <div>posts</div>;
};

const ProfilePage: NextPage<PageProps> = ({ username }) => {
  const { data: user, isLoading } = api.profile.getUserByUserName.useQuery(
    {
      username,
    },
    {
      onError: (e) => {
        alert(e);
      },
    }
  );

  if (isLoading) return <LoadingIndicator full variant={"m"} />;

  if (!user) return <div>404</div>;

  return (
    <>
      <Head>
        <title>{user.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>

      <PageLayout>
        <div className="relative h-64 w-full overflow-visible bg-slate-700" />
        <div className="relative h-[64px]">
          <Image
            className="absolute left-6 top-0 -translate-y-2/4 rounded-full border-4 border-black"
            width={124}
            height={124}
            src={user.profileImageUrl}
            alt={user.username + " profile picture"}
          />
        </div>
        <div className="px-4 pb-4 pt-2 text-2xl font-bold">
          @{user.username}
        </div>
        <div className="w-full border-b border-slate-400" />
        <ProfileFeed userId={user.id} />
      </PageLayout>
    </>
  );
};

export default ProfilePage;

export async function getStaticProps(
  context: GetStaticPropsContext<{ slug: string }>
) {
  const helpers = createProxySSGHelpers({
    router: appRouter,
    ctx: {
      prisma,
      currentUserId: null,
    },
    transformer: superjson,
  });

  const username = context.params!.slug.replace("@", "");

  await helpers.profile.getUserByUserName.prefetch({
    username,
  });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      username,
    },
  };
}

export const getStaticPaths: GetStaticPaths = function () {
  return {
    paths: ["/khongchai"],
    fallback: "blocking",
  };
};
